# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'first.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import Qt, QThread, pyqtSignal
import subprocess


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox.setGeometry(QtCore.QRect(190, 100, 70, 22))
        self.doubleSpinBox.setProperty("value", 0.25)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 100, 141, 16))
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(190, 130, 87, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 130, 121, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(60, 70, 71, 16))
        self.label_3.setObjectName("label_3")

        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_2.setGeometry(QtCore.QRect(190, 70, 70, 22))
        self.doubleSpinBox_2.setProperty("value", 0.45)
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(40, 470, 101, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.showMessageBox)

        self.showButton = QtWidgets.QPushButton(self.centralwidget)
        self.showButton.setGeometry(QtCore.QRect(40, 300, 101, 28))
        self.showButton.setObjectName("fileButton")
        self.showButton.setText("Show Sum")
        self.showButton.clicked.connect(self.showTarget)
        # 路径按钮
        self.fileButton = QtWidgets.QPushButton(self.centralwidget)
        self.fileButton.setGeometry(QtCore.QRect(40, 200, 101, 28))
        self.fileButton.setObjectName("fileButton")
        self.fileButton.setText("Choose File")
        self.fileButton.clicked.connect(self.chooseFile)
        # 运行检测按钮
        self.runDetectionButton = QtWidgets.QPushButton(self.centralwidget)
        self.runDetectionButton.setGeometry(QtCore.QRect(40, 250, 101, 28))
        self.runDetectionButton.setObjectName("runDetectionButton")
        self.runDetectionButton.setText("Run Detection")
        self.runDetectionButton.clicked.connect(self.runDetection)
        # 添加一个 QLabel 用于显示目标总数
        self.targetCountLabel = QtWidgets.QLabel(self.centralwidget)
        self.targetCountLabel.setGeometry(QtCore.QRect(150, 300, 200, 20))  # 设置位置，你可以根据实际需求调整坐标和尺寸
        self.targetCountLabel.setObjectName("targetCountLabel")
        self.targetCountLabel.setText("Total Targets: 0")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Confidence degree"))
        self.comboBox.setItemText(0, _translate("MainWindow", "yolov5s.pt"))
        self.comboBox.setItemText(1, _translate("MainWindow", "apex_pt.pt"))
        self.label_2.setText(_translate("MainWindow", "Model selection"))
        self.label_3.setText(_translate("MainWindow", "iou_thres"))
        self.pushButton.setText(_translate("MainWindow", "Check mouse"))

    def showMessageBox(self):
        # 在点击pushButton时显示信息框
        QMessageBox.information(None, "提示", "Press 'Home' to test, Press 'End' to end the test！")
        # 运行指定的.py文件
        script_path = "K:\jupterwork\yolo\logitech.test.py"
        subprocess.Popen(["python", script_path])

    def chooseFile(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(None, "Choose File", "", "All Files (*);;Python Files (*.py)", options=options)
        if fileName:
            # 更新文本框或变量，以保存所选文件的路径
            self.sourceFilePath = fileName

    def runDetection(self):
        if hasattr(self, 'sourceFilePath'):
            source_arg = f"--source={self.sourceFilePath}"
            # 调用detect.py脚本
            subprocess.run(["python", "detectc.py", source_arg])

            # 读取total_targets.txt文件中的内容
            try:
                with open('total_targets.txt', 'r') as f:
                    target_count = int(f.read())
                # 更新目标总数显示
                self.targetCountLabel.setText(f"Total Targets: {target_count}")
            except FileNotFoundError:
                QMessageBox.warning(None, "警告", "未找到目标总数文件！")
        else:
            QMessageBox.warning(None, "警告", "请选择文件路径！")

    def showTarget(self):
        # 读取total_targets.txt文件中的内容
        try:
            with open('total_targets.txt', 'r') as f:
                target_count = int(f.read())
            # 更新目标总数显示
            self.targetCountLabel.setText(f"Total Targets: {target_count}")
        except FileNotFoundError:
            QMessageBox.warning(None, "警告", "未找到目标总数文件！")
