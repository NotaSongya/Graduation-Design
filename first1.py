# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'first.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtCore import QLocale, QTranslator
from PyQt5.QtCore import QSettings, QCoreApplication
import subprocess
import os
import re
import logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

def cleanup_files():
    files = [f for f in os.listdir('.') if re.match(r'total_targets\d+\.txt', f)]

    for file in files:
        os.remove(file)

class DetectionThread(QThread):
    log_updated = pyqtSignal(str)

    def __init__(self, source_file_path, conf_threshold, iou_threshold, model_selected):
        super(DetectionThread, self).__init__()
        self.source_file_path = source_file_path
        self.conf_threshold = conf_threshold
        self.iou_threshold = iou_threshold
        self.model_selected = model_selected

    def run(self):
        source_arg = f"--source={self.source_file_path}"
        conf_thres_arg = f"--conf-thres={self.conf_threshold}"
        iou_thres_arg = f"--iou-thres={self.iou_threshold}"
        model_arg = f"--weights={self.model_selected}"

        process = subprocess.Popen(["python", "detectc.py", source_arg, conf_thres_arg, iou_thres_arg, model_arg],
                                stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1)

        while True:
            output_line = process.stdout.readline()
            if output_line == '' and process.poll() is not None:
                break
            self.log_updated.emit(output_line)

        process.stdout.close()
        process.wait()



class AimThread(QThread):
    log_updated = pyqtSignal(str)

    def __init__(self, conf_threshold, iou_threshold, model_selected):
        super().__init__()
        self.conf_threshold = conf_threshold
        self.iou_threshold = iou_threshold
        self.model_selected = model_selected

    def run(self):
        try:
            command = ['python', 'detectm.py', '--conf-thres', str(self.conf_threshold), '--iou-thres', str(self.iou_threshold), '--weights', self.model_selected]
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding='utf-8')
            logging.info("AimThread run() method started.")
            while True:
                output_line = process.stdout.readline()
                if output_line == '' and process.poll() is not None:
                    break
                self.log_updated.emit(output_line)

            process.stdout.close()
            process.wait()
        except Exception as e:
            logging.error(f"An error occurred in AimThread: {str(e)}")

class Ui_MainWindow(object):
    def __init__(self):
        self.config_file = "language_config.txt"

        self.language_code = self.loadLanguageSetting()

        self.translator = QTranslator()
        if self.language_code == "zh":
            self.translator.load("./first1_zh.qm")
        else:
            self.translator.load("./first1_en.qm")
        QCoreApplication.instance().installTranslator(self.translator)
        cleanup_files()
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 100, 141, 16))
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(190, 130, 87, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("apex_pt.pt")
        self.comboBox.addItem("csgo.pt")
        self.comboBox.currentIndexChanged.connect(self.modelSelectionChanged)
        self.model_selected = "apex_pt.pt"  # 设默认
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 130, 121, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(40, 70, 121, 16))
        self.label_3.setObjectName("label_3")

        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox.setGeometry(QtCore.QRect(190, 100, 70, 22))
        self.doubleSpinBox.setProperty("value", 0.25)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_2.setGeometry(QtCore.QRect(190, 70, 70, 22))
        self.doubleSpinBox_2.setProperty("value", 0.45)
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(40, 470, 101, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setText("Check mouse")
        self.pushButton.clicked.connect(self.showMessageBox)

        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.setGeometry(QtCore.QRect(40, 540, 128, 28))
        self.startButton.setObjectName("startButton")
        self.startButton.setText("activate mouse")
        self.startButton.clicked.connect(self.startDetection)

        self.showButton = QtWidgets.QPushButton(self.centralwidget)
        self.showButton.setGeometry(QtCore.QRect(40, 300, 101, 28))
        self.showButton.setObjectName("fileButton")
        self.showButton.setText("Show Sum")
        self.showButton.clicked.connect(self.showTarget)
        # 路径按钮
        self.fileButton = QtWidgets.QPushButton(self.centralwidget)
        self.fileButton.setGeometry(QtCore.QRect(40, 200, 101, 28))
        self.fileButton.setObjectName("fileButton")
        self.fileButton.setText("Choose File")
        self.fileButton.clicked.connect(self.chooseFile)
        # 运行检测按钮
        self.runDetectionButton = QtWidgets.QPushButton(self.centralwidget)
        self.runDetectionButton.setGeometry(QtCore.QRect(40, 250, 130, 28))
        self.runDetectionButton.setObjectName("runDetectionButton")
        self.runDetectionButton.setText("Run Detection")
        self.runDetectionButton.clicked.connect(self.runDetection)
        self.languageComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.languageComboBox.setGeometry(QtCore.QRect(630, 70, 130, 22))
        self.languageComboBox.setObjectName("languageComboBox")
        self.languageComboBox.addItem("English")
        self.languageComboBox.addItem("中文")
        current_language = self.loadLanguageSetting()
        if current_language == "zh":
            self.languageComboBox.setCurrentIndex(1)
        else:
            self.languageComboBox.setCurrentIndex(0)

        self.languageComboBox.currentIndexChanged.connect(self.switchLanguage)
        # QLabel 显示目标总数
        self.targetCountLabel = QtWidgets.QLabel(self.centralwidget)
        self.targetCountLabel.setGeometry(QtCore.QRect(150, 300, 200, 20))  # 前坐标，后大小
        self.targetCountLabel.setObjectName("targetCountLabel")
        self.targetCountLabel.setText("Total Targets : 0")
        self.targetCountLabel2 = QtWidgets.QLabel(self.centralwidget)
        self.targetCountLabel2.setGeometry(QtCore.QRect(330, 300, 200, 20))
        self.targetCountLabel2.setObjectName("targetCountLabel2")
        self.targetCountLabel2.setText("Total Targets 2: 0")
        # 显示日志 QPlainTextEdit
        self.logTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.logTextEdit.setGeometry(QtCore.QRect(150, 330, 600, 200))
        self.logTextEdit.setObjectName("logTextEdit")
        self.logTextEdit.setReadOnly(True)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Confidence degree"))
        self.comboBox.setItemText(0, _translate("MainWindow", "apex_pt.pt"))
        self.comboBox.setItemText(1, _translate("MainWindow", "csgo.pt"))
        self.label_2.setText(_translate("MainWindow", "Model selection"))
        self.label_3.setText(_translate("MainWindow", "iou_thres"))
        self.fileButton.setText(_translate("MainWindow", "Choose File"))
        self.runDetectionButton.setText(_translate("MainWindow", "Run Detection"))
        self.showButton.setText(_translate("MainWindow", "Show Sum"))
        self.targetCountLabel.setText(_translate("MainWindow", "Total Targets"))
        self.targetCountLabel2.setText(_translate("MainWindow", "Total Targets 2"))
        self.pushButton.setText(_translate("MainWindow", "Check mouse"))
        self.startButton.setText(_translate("MainWindow", "activate mouse"))
        self.warning_title = _translate("MainWindow", "Warning")
        self.select_file_path_message = _translate("MainWindow", "Select the file path！")
        self.select_weight_message = _translate("MainWindow", "Select the weight！")
        self.tip_title = _translate("MainWindow", "Tip")
        self.test_message = _translate("MainWindow", "Press 'Home' to test, Press 'End' to end the test！")

    def loadLanguageSetting(self):
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                return f.read().strip()
        else:
            return "en"

    def saveLanguageSetting(self, language_code):
        with open(self.config_file, 'w') as f:
            f.write(language_code)

    def switchLanguage(self):
        language_index = self.languageComboBox.currentIndex()
        if language_index == 0:
            language_code = "en"
        elif language_index == 1:
            language_code = "zh"

        self.saveLanguageSetting(language_code)

        QApplication.exit(0)
    def showMessageBox(self):
        # 点pushButton显示信息框
        #QMessageBox.information(None, "Tip", "Press 'Home' to test, Press 'End' to end the test！")
        QMessageBox.information(None, self.tip_title, self.test_message)
        script_path = "K:\jupterwork\yolo\logitech.test.py"
        subprocess.Popen(["python", script_path])

    def chooseFile(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(None, "Choose File", "", "All Files (*);;Python Files (*.py)", options=options)
        if fileName:
            self.sourceFilePath = fileName

    def modelSelectionChanged(self, index):
        if index == 0:
            self.model_selected = "apex_pt.pt"
        elif index == 1:
            self.model_selected = "csgo.pt"

    def runDetection(self):
        try:
            if hasattr(self, 'sourceFilePath') and hasattr(self, 'model_selected'):
                conf_threshold = self.doubleSpinBox.value()
                iou_threshold = self.doubleSpinBox_2.value()
                # 创建启动多线程
                self.detection_thread = DetectionThread(self.sourceFilePath, conf_threshold, iou_threshold, self.model_selected)
                self.detection_thread.log_updated.connect(self.updateLog)
                self.detection_thread.start()
            elif not hasattr(self, 'sourceFilePath'):
                #QMessageBox.warning(None, "Warning", "Select the file path！")
                QMessageBox.warning(self.centralwidget, self.warning_title, self.select_file_path_message)
            elif not hasattr(self, 'model_selected'):
                #QMessageBox.warning(None, "Warning", "Select the weight！")
                QMessageBox.warning(self.centralwidget, self.warning_title, self.select_weight_message)
        except Exception as e:
            print(f"An error occurred: {str(e)}")

    def startDetection(self):
        try:
            conf_threshold = self.doubleSpinBox.value()
            iou_threshold = self.doubleSpinBox_2.value()

            self.detection_thread = AimThread(conf_threshold, iou_threshold, self.model_selected)
            self.detection_thread.log_updated.connect(self.updateLog)
            self.detection_thread.start()

        except Exception as e:
            print(f"An error occurred: {str(e)}")

    def updateLog(self, log_line):
        self.logTextEdit.appendPlainText(log_line)

    def showTarget(self):
        files = [f for f in os.listdir('.') if re.match(r'total_targets\d+\.txt', f)]
        files.sort(key=lambda f: int(re.search(r'\d+', f).group()), reverse=True)

        if len(files) == 0:
            self.targetCountLabel.setText("Total Targets: N/A")
            self.targetCountLabel2.setText("Total Targets2: N/A")
        elif len(files) == 1:
            with open(files[0], 'r') as f:
                target_count = int(f.read())
            self.targetCountLabel.setText(f"Total Targets: {target_count}")
            self.targetCountLabel2.setText("Total Targets2: N/A")
        else:
            with open(files[0], 'r') as f:
                target_count = int(f.read())
            with open(files[1], 'r') as f:
                target_count2 = int(f.read())
            self.targetCountLabel.setText(f"Total Targets: {target_count}")
            self.targetCountLabel2.setText(f"Total Targets2: {target_count2}")
            if abs(target_count - target_count2) > 0.1 * max(target_count, target_count2):
                QMessageBox.warning(None, "Warning",
                                    "The difference between Total Targets and Total Targets 2 exceeds 10%!")

